1、什么是cas？
它是一种思想，是一种算法，用来实现线程安全并发的算法
同时它又是一种cpu指令 compare and swap
所以cas就是被用在并发编程领域，实现那种不能被打断的

2、cas具体是什么思路？
cas的思路就是一种乐观的思路，在修改V前，V应该是A，如果它确实是A，那我就可以将它安全的修改为B，但是如果它不是A，说明它被人修改了，那我就不改了，避免同时修改导致线程安全问题

3、cas有哪三个操作数？
原值V、期望值A，修改值B，当V==A时，才会修改为B，否则返回V或者报错或者重试

4、cas为什么依赖cpu的指令？
依赖cpu指令，保证其原子性，不会有线程安全问题

5、cas应用场景
乐观锁、原子类、并发容器

6、分析在java中原子类是如何cas实现原子操作？
AtomicInteger 使用unsafe操作来直接操作内存，unsafe操作实现底层操作 volatile修饰value字段，保证可见性
unsafe采用 cas native操作 + 自旋
unsafe类提供了硬件级别的原子操作

7、cas有什么不好的地方？
aba问题，可以采用数据库中的版号思想来解决
可能存在自旋时间过长的问题