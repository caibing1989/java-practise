1、什么是dubbo？
dubbo是一个服务治理+服务通信框架，服务的治理包括 服务的注册、服务发现、负载均衡、容错机制、服务鉴权、服务熔断降级

2、为什么要用dubbo？
首先是场景：需要远程服务通信
业务越来越复杂，单体应用越来越难以应对，可以采用分布式应用架构对业务进行抽象、拆分、解耦，达到独立设计、开发、测试、部署和运维，提高整体架构的健壮性和扩展性，提高迭代效率。
分布式应用架构比单体垂直应用架构多了一个远程服务之间的通信。

然后是远程服务通信：为什么选择成熟的远程服务通信框架？不能使用nio或者socket实现远程服务间通信吗？如何要我们自己实现RPC，该怎么做？需要解决哪些问题？
底层网络通信协议的处理
数据传输的序列化和反序列化处理工作
需要实现对服务间链路的跟踪和监控
当服务越来越多，需要一个服务注册中心来解决服务的注册、感知和发现问题
当某个节点出错之后，需要一个容错机制来保障整体服务可用
需要一个负载均衡机制来对请求进行分发

所以要选择一个成熟的服务通信+治理框架来支持&保障多服务之间的远程通信。

那为什么是dubbo，不可以是thrift、springCloud、Hessian吗？dubbo相比这些有什么异同？你是怎么基于你的业务进行选型的？

3、使用dubbo时，是提供哪种类型的接口？是rpc接口还是restful接口？为什么？rpc接口和restful接口有什么异同？
使用rpc接口时，调用方和提供方属于强依赖关系，需要比较严格的版本管理。restful接口比较轻量，只需要一个接口约定，约定的保证可以通过例如swagger来保证
restful接口可以实现跨平台服务，rpc接口一般无法实现跨平台，但是也有特例thrift


4、为什么需要序列化和反序列化？数据传输的序列化和反序列化有哪些技术？它们之间异同有哪些
序列化和反序列化诞生的背景，是分布式处理环境中，解决软件系统和硬件系统之间的互连问题，例如java bean转化为二进制串，二进制串转化为java bean

5、dubbo默认使用的是什么通信框架？
默认使用netty框架

6、什么是netty？如果直接使用nio会遇到哪些问题？netty有哪些优点？
netty是基于nio的编程框架，用于开发网络应用，例如，hadoop、dubbo中都有用到netty

7、如果直接使用Java原生nio编程，会有哪些问题？


8、dubbo和spring主流技术模式，为什么不选择spring cloud

9、@DubboComponentScan注解有什么作用？代码层面是怎么实现的？
@DubboComponentScan和Spring中的@ComponentScan作用类似，用于扫描@Service、@Reference等注解。
实现代码：
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(DubboComponentScanRegistrar.class)
public @interface DubboComponentScan {
	String[] value() default {};
	String[] basePackages() default {};
	Class<?>[] basePackageClasses() default {};
}

10、DubboComponentScanRegistrar 是怎么实现的？
DubboComponentScanRegistrar实现了ImportBeanDefinitionRegistrar接口，并且重写了registerBeanDefinitions方法

11、DubboComponentScanRegistrar重写registerBeanDefinitions方法时，做了哪些事情
- 获取扫描包的路径，默认扫描当前配置类所在的包
 - 注册@Service注解的解析类
 - 注册@Reference注解的解析类
public class DubboComponentScanRegistrar implements ImportBeanDefinitionRegistrar {
	@Override
	public void refisterBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
		Set<String> packagesToScan = getPackagesToScan(importingClassMetadata);
		registerServiceAnnotationBeanPostProcessor(packagesToScan, registry);
		registerReferenceAnnotationBeanPostProcessor(registry);
	}
	......
}

12、说下系统拆分，你有哪些经验？
系统拆分要分析主流程、分离主干系统和枝叶系统、把主干系统根据业务的内聚性独立出来，做到分别部署。

13、数据迁移是怎么做的？试想一下，业务场景：数据量较大、并发量较大、业务复杂度较高，我们要做数据迁移，
迁移前后的数据差异是：底层表结构发生了变化；分库个数发生了变化；底层存储介质发生了变化。如何做到平滑迁移？

14、如果没有 RPC 框架，那你要怎么调用另外一台服务器上的接口呢？

15、为什么b+树中，内层节点不放置真实的数据，而是将真实的数据放到叶子节点？

16、在innodb中，会有哪些并发问题？
更新丢失：更新数据时，两个事物同时更新，后者的更新会覆盖前者的更新，导致更新丢失
脏读：一个事务读取一条数据时 并对这条数据进行了修改 为提交，但是另一个事务 进来读取该数据，这样数据就处于不一致的状态
不可重复读：一个事务读取了一批数据后，再次读取这批数据时，发现缺少了一部分数据或者这批数据被修改了
幻读：一个事务读取了一批数据后，再次读取发现了一些多出来的数据，其实是其它事务插入了满足其筛选条件的数据

17、事务隔离级别有哪些？
读未提交
读已提交
可重复读
可序列化

18、事务隔离是如何实现的？
1、加锁
2、mvcc 多版本并发控制

19、innodb有哪几种类型的锁？
自增锁 表级锁
共享锁 排他锁 行级锁，事务拿到共享锁后进行读取，提高并发性能；事务拿到排他锁之后进行修改或者删除，保证数据一致性；共享锁之间兼容；排他锁与其它任何锁互斥
意向锁 在未来某个时刻会添加共享锁或者排他锁

20、innodb的具体锁算法
记录锁，单个行上的锁，用来封锁索引记录
间隙锁，间隙锁是针对可重复读及以上隔离级别，是用来解决幻读的，幻读是读到了之前没有读取到值，


21、遇到数据库连接池快速被打满的情况，紧急情况情况下很难快速定位具体原因，一般快速恢复服务的操作有哪几种？
1）重启应用
连接快速上升或者被打满，立刻重启服务（后台cron进程和php-fpm），看看服务是否有恢复
2）kill连接
如果数据库连接上升，连接达到70%的时候，DBA就准备好kill连接的工具，如果连接达到了90%，DBA直接kill连接(超过60s的活跃连接)，时候同步RD信息就可以，由于kill引起的不一致问题，RD负责。
3）主从切换或者重启数据库
如果数据库负载高或者连接打满以致于无法提供服务，DBA可直接进行下线（从库故障）、主从切换（主库故障）或者重启服务。
