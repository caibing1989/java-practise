1、标记清除算法 mark sweep
优点是简单
缺点是效率不高，标记清除的效率都不高，标记过后会产生很多不连续的内存碎片，从而导致分配大对象时触发GC

2、复制算法 copying
把内存分为两个完全的区域，每次使用其中一块，当这块使用完毕，就将还存活的对象copy到另一块，然后将这块清除
优点：实现简单，运行高效，不用考虑内存碎片问题
缺点：内存浪费
jvm实际实现中，是将内存分为一eden区和两块较小的survivor区，每次使用eden和一块survivor，回收时，把存活的对象复制到另一块survivor
如果survivor空间不够，就要依赖老年代进行分配担保，把放不下的对象直接放到老年代

3、分配担保
当新生代进行垃圾回收时，新生代的存活区域放不下这些存活对象时，那么需要把这些对象放置到老年代中去的策略。也就是老年代为新生代的gc做空间担保

4、分配担保的步骤
首先，在发生minorGc的时候，jvm会去检查老年大的最大连续内存空间是否大于新生代所有对象的空间占用总和，如果大于就可以确保minorGc是安全的
然后，如果小于，jvm会去检查是否设置了运行担保失败，如果设置了，jvm就会去检查老年代的最大连续空间是否大于历次晋升到老年代对象的平均大小
如果大于平均大小，jvm就尝试一次minorGc
如果小于平均大小，jvm就进行一次full gc

5、标记整理算法 mark compact
由于复制算法在存活对象比较多的情况，效率比较低，且浪费空间，所以老年代一般不会选择复制算法，老年代多选择标记整理算法
标记整理算法的标记过程和标记清除一样，但后续不是直接清除可回收对象，而是先让可存活对象先向一端移动，然后清除边界以外的内存

6、gc root在哪里
当前活跃的栈帧中指向gc堆中对象的引用