 Proxy0代表的是client端。它实现了两个最主要的功能：
 其一，在static块中，该代理对象为传入接口的每一个方法及Object类的方法都通过使用反射技术，生成了Method对象，如request方法的Method对象是m3。
 其二，实现了公共接口Subject，并实现了里面的request方法，即client与server都实现了公共的接口。由于$Proxy0保存着DynamicSubject对象的引用（newProxyInstance的第三个参数），
 这样在subject.request()，会跳转到DynamicSubject的invoke方法执行，这时发生真正的调用method.invoke(originalObj，arg)。
 这里的originalObj就是指Server端的实例对象。可以看到最终落脚点是实例对象originalObj发生的调用

public final class $Proxy0 extends Proxy implements Subject {  
    private static Method m1;  
    private static Method m0;  
    private static Method m3;  
    private static Method m2;  
    static {  
        try {  
            m1 = Class.forName("java.lang.Object").getMethod("equals",  
                    new Class[] { Class.forName("java.lang.Object") });  
            m0 = Class.forName("java.lang.Object").getMethod("hashCode",  
                    new Class[0]);    
            m3 = Class.forName("***.RealSubject").getMethod("request",  
                    new Class[0]);    
            m2 = Class.forName("java.lang.Object").getMethod("toString",  
                    new Class[0]);  
        }  
    } //static  

    public $Proxy0(InvocationHandler invocationhandler) {  
        super(invocationhandler);  
    }  
  
    @Override  
    public final int hashCode() {  
        try {  
            return ((Integer) super.h.invoke(this, m0, null)).intValue();  
        } catch (Throwable throwable) {  
            throw new UndeclaredThrowableException(throwable);  
        }  
    }  
  
    public final void request() {  
        try {  
            super.h.invoke(this, m3, null);  
            return;  
        } catch (Error e) {  
        } catch (Throwable throwable) {  
            throw new UndeclaredThrowableException(throwable);  
        }  
    }  
}  


class Proxy{
    InvocationHandler h=null;
    protected Proxy(InvocationHandler h) {
        this.h = h;
    }
    ...
}