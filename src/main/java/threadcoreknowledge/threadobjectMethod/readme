1、为什么wait需要在同步代码块中使用，而sleep不需要
因为wait需要配合notify一起使用，需要synchronized保护，避免出现线程安全的问题，导致notify先执行wait后执行
sleep就是自己线程单独使用，和其它线程关系不大，所以可以不在同步代码块中使用

2、为什么wait、notify、notifyAll定义在Object类中，而sleep定义在Thread类中
因为wait、notify、notifyAll操作的是锁级别的，而且锁是绑定到Object对象中的，而不是Thread中

3、假设将wait、notify、notifyAll定义在Thread类中，想象一下会出现什么样的限制？
thread中可以使用多个锁，这样wait的用法就有问题

4、假设我们对Thread对象使用wait，例如thread.wait()，会怎样呢？
因为thread退出的时候，会自动地调用notify方法，所以有可能会打乱整体的节奏，所以不建议对thread使用wait、notify方法，但是join就会这么用

5、notifyAll之后，多个线程开始都来抢这把锁，如果没有抢到会怎么办呢？
没有抢到就等待，或者等待线程调度器来调度

6、sleep方法的作用
想让线程在预期的时间去执行，其它时间不去占用cup资源，相比while循环要好很多

7、sleep方法有哪些特点
不释放锁，响应中断：抛出InterruptedException，并清除中断状态

8、wait、notify和sleep的异同点
相同点：阻塞、响应中断
不同点：同步代码块、锁的释放、指定时间、所属类

9、join的作用
有一个新的线程加入我们，我们需要等他执行完毕之后，再往下执行
例如main等待子线程执行完毕之后，再执行

10、join的注意点

11、yield方法的作用
释放cpu的时间片，但是jvm不保证遵循