Guava cache是一个支持高并发的线程安全的本地缓存。多线程情况下也可以安全的访问或者更新cache。
这些都是借鉴了ConcurrentHashMap的结果，不过，guava cache 又有自己的特性 ：
"automatic loading of entries into the cache"


1、Guava cache的缓存功能
自动将entry节点加载进缓存结构中；
当缓存的数据超过设置的最大值时，使用LRU算法移除；
具备根据entry节点上次被访问或者写入时间计算它的过期机制；
缓存的key被封装在WeakReference引用内；
缓存的Value被封装在WeakReference或SoftReference引用内；
统计缓存使用过程中命中率、异常率、未命中率等统计数据。

2、Guava Cache的使用场景
愿意消耗一些内存空间来提升速度；
能够预计某些key会被查询一次以上；
缓存中存放的数据总量不会超出内存容量(`Guava Cache`是单个应用运行时的本地缓存)。

3、GuavaCache使用时主要分两种模式
LoadingCache
CallableCache
区别在于：你有没有合理的默认方法来加载或计算与键关联的值