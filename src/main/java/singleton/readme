饿汉：简单，安全，资源浪费
懒汉：写法复杂，有线程安全问题
静态内部类：可用
双重检查模式：面试用，同时做到了线程安全和懒加载
枚举类：最好

枚举类有什么优点？
effective java中 说了实现单例的最好模式是枚举形式，第一个好处 是写法最简单，第二个 线程安全有保障，因为枚举是一个特殊类，经过反编译发现，枚举实际上
会被编程成final class 然后继承enum这个父类，这个父类中的各个实例都是通过static来定义的，所以枚举的本质 就是一个static对象。在这种情况下，第一次
使用到这个枚举时，才会被加载进来，所以它也是一种懒加载。
同时，这种枚举形式的单例，可以防御通过反序列化/反射来破坏单例，比如通过反射就可以将我们私用的构造方法绕过去，反序列化也可以反序列化出多个实例

各个方法的使用场合？
如果程序一开始需要加载的资源特别多，就用懒加载
懒加载虽然可以做到节省内存，但是其实这个不是很关键，相反我们需要考虑很多线程安全问题

为什么双重检查模式需要用volatile？

讲一讲java内存模型？
内存模型的起因，为什么java有，c语言没有，多核情况下的表现不一致
有三种概念，jvm结构、java内存模型、java对象模型
java内存模型 是一个规范，规范jvm、内存、cpu一系列的转换关系，帮助程序员顺利的开发
java内存模型中最重要的概念是重排序、可见性、原子性
重排序的例子、好处
可见性这块，jmm对可见性的抽象，happens before原则，volatile关键字 使用场合，和synchronized的关系
原子性，哪些操作是原子性的

volatile和synchronize的异同？

生成对象是不是原子操作？
创建空的对象，分配内存空间
初始化
赋值

什么是内存可见性